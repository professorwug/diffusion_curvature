# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/Curvature by Quadratic Fitting.ipynb.

# %% auto 0
__all__ = ['volume_comparisons_of_graph_at_idx', 'extract_scalar_curvature', 'scalar_curvatures_of_graph']

# %% ../nbs/Curvature by Quadratic Fitting.ipynb 5
import numpy as np
from .volume import volume_via_heat_at_scales, actual_euclidean_volumes_at_radii
def volume_comparisons_of_graph_at_idx(
        G, # pygsp graph
        idx, # node idx to get comparisons from
        dim, # intrinsic dimension of graph/manifold
        ts, # diffusion times at which to give comparison
):
    """Returns the ratio of Vol(B_m)/Vol(B_E) at each of the times"""
    vols_manifold = volume_via_heat_at_scales(G,idx,ts)
    radii = np.sqrt(ts)
    vols_euclidean = actual_euclidean_volumes_at_radii(dim, radii)
    return volume_ratio(vols_manifold,vols_euclidean)

# %% ../nbs/Curvature by Quadratic Fitting.ipynb 6
def extract_scalar_curvature(
        radii, 
        volume_ratios,
        dim,
        verbose=False
        ):
    coeffs = np.polyfit(radii, volume_ratios, deg=3)
    if verbose: print(f"Coeffs are {coeffs}")
    S = -coeffs[1]*6*(dim+2)
    return S

# %% ../nbs/Curvature by Quadratic Fitting.ipynb 30
from tqdm.notebook import trange
def scalar_curvatures_of_graph(
    G, 
    dim,
    ts = np.arange(1,10)
):
    ks = np.empty(G.L.shape[0])
    for i in trange(len(ks)):
        ratios = volume_comparisons_of_graph_at_idx(
            G,
            i,
            dim,
            ts
        )
        ks[i] = extract_scalar_curvature(np.sqrt(ts),ratios,dim)
    return ks
