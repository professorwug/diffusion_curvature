# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/Manifold Distances.ipynb.

# %% auto 0
__all__ = ['phate_distances', 'pairwise_euclidean', 'phate_distances_differentiable']

# %% ../nbs/Manifold Distances.ipynb 3
from sklearn.metrics import pairwise_distances
import numpy as np
import scipy
import graphtools
def phate_distances(G:graphtools.api.Graph):
    assert G.Pt is not None
    if type(G.Pt) == np.ndarray:
        log_Pts = -np.log(G.Pt + 1e-6)
        D = pairwise_distances(log_Pts)
    elif type(G.Pt) == scipy.sparse.csr_matrix:
        # TODO: There's likely a more efficient way of doing this. 
        # But I mustn't tempt the devil of premature optimization
        Pt_np = G.Pt.toarray()
        log_Pts = -np.log(Pt_np + 1e-6)
        D = pairwise_distances(log_Pts)
    G.D = D
    return G

# %% ../nbs/Manifold Distances.ipynb 4
import jax.numpy as jnp
def pairwise_euclidean(x, y):
  # Pairwise euclidean distances in Jax, courtesy of [jakevdp](https://github.com/google/jax/discussions/11841)
  assert x.ndim == y.ndim == 2
  return jnp.sqrt(((x[:, None, :] - y[None, :, :]) ** 2).sum(-1))
def phate_distances_differentiable(Pt):
    log_Pts = -jnp.log(Pt + 1e-6)
    D = pairwise_euclidean(log_Pts, log_Pts)
    return D
