package:
  name: diffusion_curvature
  version: 0.0.1
source:
  sha256: 83f55783947a5a36c40b336de9967a9fa963bf7417cdfbf640f1bce89d1eb689
  url: https://files.pythonhosted.org/packages/b7/1a/cf34dc23055d7a51269afe16a2f23fc697604768afc81b94c5e9e0b071fa/diffusion_curvature-0.0.1.tar.gz
about:
  description: "# Diffusion Curvature\n\n<!-- WARNING: THIS FILE WAS AUTOGENERATED!\
    \ DO NOT EDIT! -->\n\nDiffusion curvature is a pointwise extension of Ollivier-Ricci\n\
    curvature, designed specifically for the often messy world of pointcloud\ndata.\
    \ Its advantages include:\n\n1.  Unaffected by density fluctuations in data: it\
    \ inherits the\n    diffusion operator\u2019s denoising properties.\n2.  Fast,\
    \ and scalable to millions of points: it depends only on matrix\n    powering\
    \ - no optimal transport required.\n\n## Install\n\nIt\u2019s not yet available\
    \ via PyPI. In the meantime, you can run:\n\n``` sh\npip install git+git://github.com/professorwug/diffusion_curvature@master\n\
    ```\n\n## Usage\n\nTo compute diffusion curvature, first create a `graphtools`\
    \ graph with\nyour data. Graphtools offers extensive support for different kernel\n\
    types (if creating from a pointcloud), and can also work with graphs in\nthe `PyGSP`\
    \ format. We recommend using `anistropy=1`, and verifying that\nthe supplied knn\
    \ value encompasses a reasonable portion of the graph.\n\n``` python\nfrom diffusion_curvature.datasets\
    \ import torus\nimport graphtools\nX_torus, torus_gaussian_curvature = torus(n=5000)\n\
    G_torus = graphtools.Graph(X_torus, anisotropy=1, knn=30)\n```\n\nNext, instantiate\
    \ a\n[`DiffusionCurvature`](https://professorwug.github.io/diffusion_curvature/core%20(graphtools).html#diffusioncurvature)\n\
    operator.\n\n``` python\nfrom diffusion_curvature.graphtools import DiffusionCurvature\n\
    DC = DiffusionCurvature(t=12)\n```\n\n------------------------------------------------------------------------\n\
    \n<a\nhref=\"https://github.com/professorwug/diffusion_curvature/blob/main/diffusion_curvature/graphtools.py#LNone\"\
    \ntarget=\"_blank\" style=\"float:right; font-size:smaller\">source</a>\n\n###\
    \ DiffusionCurvature\n\n>      DiffusionCurvature (t:int, distance_type='PHATE',\
    \ use_entropy:bool=False,\n>                          **kwargs)\n\nInitialize\
    \ self. See help(type(self)) for accurate signature.\n\n|               | **Type**\
    \ | **Default** | **Details**                                                \
    \                                                       |\n|---------------|----------|-------------|-------------------------------------------------------------------------------------------------------------------|\n\
    | t             | int      |             | Number of diffusion steps to use when\
    \ measuring curvature. TODO: Heuristics                                      \
    \ |\n| distance_type | str      | PHATE       |                              \
    \                                                                            \
    \         |\n| use_entropy   | bool     | False       | If true, uses KL Divergence\
    \ instead of Wasserstein Distances. Faster, seems empirically as good, but less\
    \ proven. |\n| kwargs        |          |             |                      \
    \                                                                            \
    \                 |\n\nAnd, finally, pass your graph through it. The\n[`DiffusionCurvature`](https://professorwug.github.io/diffusion_curvature/core%20(graphtools).html#diffusioncurvature)\n\
    operator will store everything it computes \u2013 the powered diffusion\nmatrix,\
    \ the estimated manifold distances, and the curvatures \u2013 as\nattributes of\
    \ your graph. To get the curvatures, you can run `G.ks`.\n\n``` python\nG_torus\
    \ = DC.curvature(G_torus, dimension=2)\n```\n\n``` python\nplot_3d(X_torus, G_torus.ks,\
    \ colorbar=True, title=\"Diffusion Curvature on the torus\")\n```\n\n![](index_files/figure-commonmark/cell-6-output-1.png)\n"
  dev_url: https://github.com/professorwug/diffusion_curvature
  doc_url: https://professorwug.github.io/diffusion_curvature
  home: https://github.com/professorwug/diffusion_curvature
  license: Apache Software
  license_family: APACHE
  summary: Fast, pointwise graph curvature
build:
  noarch: python
  number: '0'
  script: '{{ PYTHON }} -m pip install . -vv'
extra:
  recipe-maintainers:
  - professorwug
requirements:
  host:
  - pip
  - python
  - packaging
  - numpy
  - pandas
  - scikit-learn
  - scipy
  - sympy
  - numba
  - tqdm
  - rich
  - typer
  - matplotlib
  - plotly
  - nbdev>=2.3.12
  - pyyaml
  - graphtools
  - scikit-dimension
  run:
  - pip
  - python
  - packaging
  - numpy
  - pandas
  - scikit-learn
  - scipy
  - sympy
  - numba
  - tqdm
  - rich
  - typer
  - matplotlib
  - plotly
  - nbdev>=2.3.12
  - pyyaml
  - graphtools
  - scikit-dimension
test:
  imports:
  - diffusion_curvature
